services:
  postgres:
    build:
      context: dockerization/postgres
      dockerfile: Dockerfile
    hostname: postgres
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "-c", "pg_isready --quiet -U ${POSTGRES_USER} -d postgres" ]
      interval: 1s
      retries: 10
      start_period: 5s
    ports:
      - "5432:5432"
    env_file:
      - .env
  backend:
      build:
        context: .
        dockerfile: ./dockerization/backend/Dockerfile
      healthcheck:
        test: [ "CMD-SHELL", "-c", "curl -o /dev/null http://localhost:5000/admin/login/?next=/admin/" ]
        interval: 1s
        retries: 10
        start_period: 10s
      volumes:
        - static:/var/www/static
        - media:/var/www/media
      env_file:
          - .env
      restart: always
      depends_on:
        postgres:
          condition: service_healthy
      develop:
        watch:
          - action: sync+restart
            path: ./django_app
            target: /opt/app
  bot:
    container_name: bot
    build:
      context: .
      dockerfile: ./dockerization/bot/Dockerfile
    hostname: bot
    volumes:
      - media:/var/www/media
    env_file:
      - .env
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./telegram_app
          target: /opt/app
  nginx:
    build:
      context: .
      dockerfile: ./dockerization/nginx/Dockerfile
    volumes:
      - logs:/code/logs/
      - static:/var/www/static
      - media:/var/www/media
    ports:
      - "80:80"
      - "443:443"
    restart: always
    depends_on:
      backend:
        condition: service_healthy

volumes:
  media:
  static:
  logs:
