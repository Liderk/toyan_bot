import os

from aiogram.types import BufferedInputFile, InputMediaDocument

from config import settings

from orm.models import Games
from scheduler.handlers.notifications.base import INotification
from scheduler.handlers.notifications.utils import file_to_byte
from utils.common import format_datetime_to_project_tz_str


class GameNotificator(INotification):
    model: type[Games] = Games

    def prepare_message_text(self, obj: Games) -> str:
        start_date = format_datetime_to_project_tz_str(obj.start_date)
        end_date = format_datetime_to_project_tz_str(obj.end_date)
        return (
            f"–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ {start_date} —Å–æ—Å—Ç–æ–∏—Ç—Å—è –∏–≥—Ä–∞:\n"
            f"üî´ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:</b> {obj.name}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {obj.descriptions}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {start_date}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {end_date}\n"
            f"üë§ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã:</b> {obj.organizers}\n"
            f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {obj.city}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> {obj.game_area}\n"
            f"‚öîÔ∏è <b>–ö–æ–º–∞–Ω–¥–∏—Ä —Å—Ç–æ—Ä–æ–Ω—ã:</b> {obj.side_commander or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚öîÔ∏è <b>–ö–æ–º–∞–Ω–¥–∏—Ä –¢–æ—è–Ω–∞:</b> {obj.toyan_commander or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üîç <b>–ú–∞—Å—à—Ç–∞–± –∏–≥—Ä—ã:</b> {'–ö—Ä—É–ø–Ω–∞—è' if obj.big else '–ù–µ–±–æ–ª—å—à–∞—è'}"
        )

    def prepare_message_files(self, game: Games, message_text: str) -> list:
        files = []

        if game.game_map:
            map_file = os.path.join(settings.MEDIA_ROOT, game.game_map)
            media_file = InputMediaDocument(media=BufferedInputFile(file_to_byte(map_file), map_file),
                                            caption=message_text)
            files.append(media_file)
        if game.location_map:
            map_file = os.path.join(settings.MEDIA_ROOT, game.location_map)
            media_file = InputMediaDocument(media=BufferedInputFile(file_to_byte(map_file), map_file))
            files.append(media_file)

        return files
